##### Crawl Init file ###############################################
# For descriptions of all options, as well as some more in-depth information
# on setting them, consult the file
#    options_guide.txt
# in your /docs directory. If you can't find it, the file is also available
# online at:
# https://github.com/crawl/crawl/blob/master/crawl-ref/docs/options_guide.txt
#
# Crawl uses the first file of the following list as its option file:
#  * init.txt in the -rcdir directory (if specified)
#  * .crawlrc in the -rcdir directory (if specified)
#  * init.txt (in the Crawl directory)
#  * ~/.crawl/init.txt (Unix only)
#  * ~/.crawlrc (Unix only)
#  * ~/init.txt (Unix only)
#  * settings/init.txt (in the Crawl directory)

##### Some basic explanation of option syntax #######################
# Lines beginning with '#' are comments. The basic syntax is:
#
# field = value         or      field.subfield = value
#
# Only one specification is allowed per line.
#
# The terms are typically case-insensitive except in the fairly obvious
# cases (the character's name and specifying files or directories when
# on a system that has case-sensitive filenames).
#
# White space is stripped from the beginning and end of the line, as
# well as immediately before and after the '='. If the option allows
# multiple comma/semicolon-separated terms (such as
# autopickup_exceptions), all whitespace around the separator is also
# trimmed. All other whitespace is left intact.
#
# There are three broad types of Crawl options: true/false values (booleans),
# arbitrary values, and lists of values. The first two types use only the
# simple =, with later options - which includes your options that are different
# from the defaults - overriding earlier ones. List options allow using +=, ^=,
# -=, and = to append, prepend, remove, and reset, respectively. Usually you will
# want to use += to add to a list option. Lastly, there is := which you can use
# to create an alias, like so:
#   ae := autopickup_exceptions
# From there on, 'ae' will be treated as if it you typed autopickup_exceptions,
# so you can save time typing it.
#

##### Other files ###################################################
# You can include other files from your options file using the 'include'
# option. Crawl will treat it as if you copied the whole text of that file
# into your options file in that spot. You can uncomment some of the following
# lines by removing the beginning '#' to include some of the other files in
# this folder.

# Some useful, more advanced options, implemented in LUA.
# include = advanced_optioneering.txt

# Alternative vi bindings for Dvorak users.
# include = dvorak_command_keys.txt

# Alternative vi bindings for Colemak users.
# include = colemak_command_keys.txt

# Alternative vi bindings for Neo users.
# include = neo_command_keys.txt

# Override the vi movement keys with a non-command.
# include = no_vi_command_keys.txt

# Turn the shift-vi keys into safe move, instead of run.
# include = safe_move_shift.txt

travel_delay = -1
explore_delay = 20

autofight_stop = 0
bold_brightens_foreground= true
explore_auto_rest=true
default_manual_training = true
explore_stop = shops,altars,portals,branches,runed_doors

tile_web_mouse_control = true
mouse_input = true
tile_layout_priority = minimap, inventory, command, spell, monster
tile_upstairs_col = green
tile_branchstairs_col = red
tile_downstairs_col = red
tile_door_col = #c27149
tile_wall_col = #4c4141
tile_explore_horizon_col = #919191
tile_floor_col = #0f0d0d
tile_item_col = #0f0d0d
tile_feature_col = #d4be21
tile_plant_col = #3e5a2f
tile_water_col = #0b5d79
tile_deep_water_col = #1212b3
tile_trap_col = #f447ff
tile_transporter_col = #ff5656
tile_transporter_landing_col = #59ff89
tile_lava_col = #5f0a00
tile_cell_pixels = 48
tile_font_crt_size = 20
tile_font_stat_size = 20
tile_font_msg_size = 20
tile_font_tip_size = 20
tile_font_lbl_size = 20
tile_map_pixels = 0
tile_filter_scaling = true 
show_more = false
travel_delay = -1
explore_delay = 20

autofight_stop = 0
bold_brightens_foreground= true
explore_auto_rest=true
default_manual_training = true
explore_stop = shops,altars,portals,branches,runed_doors

tile_web_mouse_control = true
mouse_input = true
tile_layout_priority = minimap, inventory, command, spell, monster
tile_upstairs_col = green
tile_branchstairs_col = red
tile_downstairs_col = red
tile_door_col = #c27149
tile_wall_col = #4c4141
tile_explore_horizon_col = #919191
tile_floor_col = #0f0d0d
tile_item_col = #0f0d0d
tile_feature_col = #d4be21
tile_plant_col = #3e5a2f
tile_water_col = #0b5d79
tile_deep_water_col = #1212b3
tile_trap_col = #f447ff
tile_transporter_col = #ff5656
tile_transporter_landing_col = #59ff89
tile_lava_col = #5f0a00
tile_cell_pixels = 48
tile_font_crt_size = 20
tile_font_stat_size = 20
tile_font_msg_size = 20
tile_font_tip_size = 20
tile_font_lbl_size = 20
tile_map_pixels = 0
tile_filter_scaling = true 
show_more = false
force_more_message = aaaaa

{
local infinite_loop_safety_net = 0
local infinite_loop_safety_net_max = 100

local auto_identify_scrolls_and_potions = false
local waiting_for_scroll_effect = false
local remaining_unidentified_scrolls_and_potions = false

function ready()
    if auto_identify_scrolls_and_potions and infinite_loop_safety_net < infinite_loop_safety_net_max then
        infinite_loop_safety_net = infinite_loop_safety_net + 1

        if not remaining_unidentified_scrolls_and_potions then
            stop_identifying('Auto Identify Stopped - nothing left to identify.')
        end

        if waiting_for_scroll_effect then
            take_action({'CMD_WAIT'})
            waiting_for_scroll_effect = false
        elseif remaining_unidentified_scrolls_and_potions then
            identify_scrolls_and_potions()
        end
    end
end

function c_interrupt_activity(aname)
    if string.find(aname, "rest") and auto_identify_scrolls_and_potions then
        stop_identifying('Auto Identify Stopped - rest interrupted.')
    end

    return false
end

function identify_scrolls_and_potions() 
    local item_list = items.inventory()
    local scroll_unidentified_list = {}
    local potion_unidentified_list = {}
    local scroll_of_identify_letter = nil
    local scroll_indexer = 0
    local potion_indexer = 0

    for _, item in pairs(item_list) do
        if string.find(string.lower(item:name()), "scroll") then
            if not item.fully_identified then
                scroll_unidentified_list[scroll_indexer] = item
                scroll_indexer = scroll_indexer + 1 
            elseif string.find(item:name(), "identify") then
                scroll_of_identify_letter = items.index_to_letter(item.slot)
            end
        end
        if string.find(item:name(), "potion") then
            if not item.fully_identified then
                potion_unidentified_list[potion_indexer] = item
                potion_indexer = potion_indexer + 1 
            end
        end
    end

    if table_length(scroll_unidentified_list) > 0 then
        scroll_unidentified_list = sort_item_array(scroll_unidentified_list)
    end
    if table_length(potion_unidentified_list) > 0 then
        potion_unidentified_list = sort_item_array(potion_unidentified_list)
    end
    
    if table_length(scroll_unidentified_list) > 0 or (table_length(potion_unidentified_list) > 0 and scroll_of_identify_letter) then
        remaining_unidentified_scrolls_and_potions = true 
    else
        remaining_unidentified_scrolls_and_potions = false
    end

    if scroll_of_identify_letter and table_length(potion_unidentified_list) > 0 then
        identify_item(scroll_of_identify_letter, potion_unidentified_list[0])
    elseif table_length(scroll_unidentified_list) > 0 then
        read_scroll_and_rest(scroll_unidentified_list[0])
    end
end

function stop_identifying(message)
    if message then
        notify_print(message)
    end
    remaining_unidentified_scrolls_and_potions = false
    auto_identify_scrolls_and_potions = false
    infinite_loop_safety_net = 0
end

function identify_item(identify_scroll_letter, item)
    crawl.sendkeys("r"..identify_scroll_letter..items.index_to_letter(item.slot))
end

function read_scroll_and_rest(scroll)
    waiting_for_scroll_effect = true
    crawl.sendkeys("r"..items.index_to_letter(scroll.slot))
end

function sort_item_array(item_array)
    local items_sorted = false
    local iteration_count = 0
    
    while not items_sorted do
        local last_item = nil
        iteration_count = iteration_count + 1
        items_sorted = true
        for index = 0, table_length(item_array) - 1 do
            local item = item_array[index]
            if last_item then
                if item.quantity > last_item.quantity then
                    items_sorted = false
                    item_array[index - 1] = item
                    item_array[index] = last_item
                else 
                    item_array[index] = item
                    last_item = item
                end
            else
                item_array[index] = item
                last_item = item
            end
        end
    end

    return item_array
end

function start_identify_scrolls_and_potions()
    auto_identify_scrolls_and_potions = true
    identify_scrolls_and_potions()
end

function table_length(T)
    local count = 0
    for _ in pairs(T) do count = count + 1 end
    return count
end

function take_action(action, delay)
    if delay then
        crawl.delay(delay)
    end
    crawl.do_commands(action)
end

function notify_print(message)
    crawl.mpr(message, notify_text_channel)
end
}